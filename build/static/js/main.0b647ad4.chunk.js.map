{"version":3,"sources":["actions/types.js","actions/Vehicles.js","actions/Customers.js","components/VehicleInfo/VehicleInfo.js","components/VehicleInfo/locales.js","reducers/Vehicles.js","reducers/Customers.js","reducers/index.js","sagas/Vehicles.js","sagas/Customers.js","sagas/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["GET_VEHICLES_INFO","GET_CUSTOMERS_INFO","getVehiclesInfoSuccess","response","type","payload","getVehiclesInfoFailure","error","getCustomersInfoSuccess","getCustomersInfoFailure","locales","LocalizedStrings","en","VEHICAL_OVERVIEW_STATUS","VEHICLE_REGISTERATION","VEHICLE_ID","ONLINE","OFFLINE","ALL","CUSTOMERS","VID","REGISTERATION_NUMBER","CUSTOMER_NAME","STATUS","sweedish","VehicleInfo","props","getVehiclesOverview","data","overviewData","length","onlineVehicles","filter","x","status","offlineVehicles","push","name","value","color","setState","getVehiclesData","state","selectedCustomer","selectedStatus","filteredData","_","groupBy","vehicle","indexOf","customerId","handleChange","field","handleChangeLanguage","e","setLanguage","target","selectedLanguage","resetFilter","renderCustomerCards","customer","id","ExpansionPanel","key","ExpansionPanelSummary","expandIcon","aria-controls","className","ExpansionPanelDetails","map","index","style","backgroundColor","regNo","simulateTime","self","this","getVehiclesInfo","getCustomersInfo","setInterval","onState","random","selectedVehicle","loading","customers","CircularProgress","Container","maxWidth","data-test","Grid","container","spacing","item","xs","FormControl","InputLabel","Select","native","onChange","input","Input","renderValue","selected","join","MenuProps","PaperProps","maxHeight","width","multiple","MenuItem","Checkbox","checked","ListItemText","primary","Button","variant","onClick","marginTop","height","dataKey","isAnimationActive","cx","cy","outerRadius","fill","label","entry","Component","connect","vehicles","INIT_STATE","reducers","combineReducers","action","isError","err","getVehicleInfoFromServer","getVehicleInfo","rootSaga","getVehicleInfoRequest","a","fetch","then","json","catch","call","put","takeEvery","all","fork","getCustomersInfoFromServer","getCustomersInfoRequest","getState","sagaMiddleware","createSagaMiddleware","middlewares","configureStore","initialState","store","createStore","compose","applyMiddleware","run","RootSaga","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b647ad4.chunk.js","sourcesContent":["// Vehicles Actions\nexport const GET_VEHICLES_INFO = 'GET_VEHICLE_INFO';\nexport const GET_VEHICLES_INFO_SUCCESS = 'GET_VEHICLE_INFO_SUCCESS';\nexport const GET_VEHICLES_INFO_FAILURE = 'GET_VEHICLE_INFO_FAILURE';\n\n// Customers Actions\nexport const GET_CUSTOMERS_INFO = 'GET_CUSTOMERS_INFO';\nexport const GET_CUSTOMERS_INFO_SUCCESS = 'GET_CUSTOMERS_INFO_SUCCESS';\nexport const GET_CUSTOMERS_INFO_FAILURE = 'GET_CUSTOMERS_INFO_FAILURE';","/**\n * Dashboard App Actions\n */\nimport {\n    GET_VEHICLES_INFO,\n    GET_VEHICLES_INFO_SUCCESS,\n    GET_VEHICLES_INFO_FAILURE,\n} from './types';\n/**\n * Redux Action Get Vehicles Info\n */\nexport const getVehiclesInfo = (filter) => ({\n    type: GET_VEHICLES_INFO,\n    filter,\n});\n\n/**\n * Redux Action Get Vehicles Info Success\n */\nexport const getVehiclesInfoSuccess = (response) => ({\n    type: GET_VEHICLES_INFO_SUCCESS,\n    payload: response\n})\n\n/**\n * Redux Action Get Vehicles Info Failure\n */\nexport const getVehiclesInfoFailure = (error) => ({\n    type: GET_VEHICLES_INFO_FAILURE,\n    payload: error\n})","/**\n * Dashboard App Actions\n */\nimport {\n    GET_CUSTOMERS_INFO,\n    GET_CUSTOMERS_INFO_SUCCESS,\n    GET_CUSTOMERS_INFO_FAILURE,\n} from './types';\n/**\n * Redux Action Get Customers Info\n */\nexport const getCustomersInfo = (filter) => ({\n    type: GET_CUSTOMERS_INFO,\n    filter,\n});\n\n/**\n * Redux Action Get Customers Info Success\n */\nexport const getCustomersInfoSuccess = (response) => ({\n    type: GET_CUSTOMERS_INFO_SUCCESS,\n    payload: response\n})\n\n/**\n * Redux Action Get Customers Info Failure\n */\nexport const getCustomersInfoFailure = (error) => ({\n    type: GET_CUSTOMERS_INFO_FAILURE,\n    payload: error\n})","/**\n * VehicleInfo\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getVehiclesInfo, getCustomersInfo } from '../../actions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LocalizedStrings from 'react-localization';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport _ from 'lodash';\nimport localeData from './locales';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport {\n    PieChart, Pie, Tooltip, Cell\n} from 'recharts'\n\n// Locales\nlet locales = new LocalizedStrings(localeData);\n\nclass VehicleInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            simulateTime: 60000,\n            selectedLanguage: 'en',\n            selectedCustomer: [],\n            selectedStatus: '',\n            filteredData: [],\n            overviewData: [],\n        }\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.props.getVehiclesInfo();\n        this.props.getCustomersInfo();\n        // Function to simulate vehicles status randomly\n        setInterval(function () {\n            const { data } = self.props\n            const onState = _.random(0, 1);\n            const selectedVehicle = _.random(0, data.length - 1);\n            if (onState === 1) {\n                data[selectedVehicle]['status'] = (data[selectedVehicle]['status'] === 'offline') ? 'online' : 'offline';\n                self.getVehiclesData(data);\n                self.getVehiclesOverview(data)\n            }\n\n        }, this.state.simulateTime);\n    }\n\n    componentWillReceiveProps(props) {\n        const filteredData = _.groupBy(props.data, 'customerId');\n        this.setState({ filteredData }, () => {\n            this.getVehiclesOverview(this.props.data)\n        })\n    }\n\n    /**\n    * function to get overview status for vehicles\n    */\n    getVehiclesOverview = (data) => {\n        let overviewData = [];\n        if (data && !!data.length) {\n            const onlineVehicles = data.filter((x) => x.status === 'online').length;\n            const offlineVehicles = data.filter((x) => x.status === 'offline').length;\n            overviewData.push({ name: 'Online', value: onlineVehicles, color: '#7bd07b' }, { name: 'Offline', value: offlineVehicles, color: '#bb2b17' })\n        }\n        this.setState({ overviewData })\n    };\n\n    /**\n     * function to filter related data based upon user selection\n     */\n    getVehiclesData = (data) => {\n        const { selectedCustomer, selectedStatus } = this.state\n        let filteredData = _.groupBy(data, 'customerId');\n        if (!!selectedCustomer.length && !!selectedStatus) {\n            filteredData = data.filter((vehicle) => vehicle.status === selectedStatus && selectedCustomer.indexOf(vehicle.customerId) > -1)\n            filteredData = _.groupBy(filteredData, 'customerId');\n        } else if (!!selectedCustomer.length && !selectedStatus) {\n            filteredData = data.filter((vehicle) => selectedCustomer.indexOf(vehicle.customerId) > -1)\n            filteredData = _.groupBy(filteredData, 'customerId');\n        } else if (!selectedCustomer.length && !!selectedStatus) {\n            filteredData = data.filter((vehicle) => vehicle.status === selectedStatus)\n            filteredData = _.groupBy(filteredData, 'customerId');\n        }\n        this.setState({ filteredData })\n    };\n\n    /**\n     * function to handle customer and status dropdown update\n     */\n    handleChange = (value, field) => {\n        this.setState({\n            [field]: value\n        }, () => {\n            this.getVehiclesData(this.props.data);\n        });\n    };\n\n    /**\n     * function to handle language toggle\n     */\n    handleChangeLanguage = (e) => {\n        locales.setLanguage(e.target.value);\n        this.setState({\n            selectedLanguage: e.target.value\n        });\n    };\n\n    /**\n     * function to handle Reset Filters\n     */\n    resetFilter = (e) => {\n        this.setState({\n            selectedStatus: null,\n            selectedCustomer: []\n        }, () => {\n            this.getVehiclesData(this.props.data);\n        });\n    };\n\n    /**\n     * function to handle language toggle\n     */\n    renderCustomerCards = (filteredData, customer) => {\n        if (filteredData && filteredData[customer.id]) {\n            return (<ExpansionPanel key={customer.id}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <h4 className=\"customer-name\">Customer: </h4>{customer.name}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <div className=\"vehicle-container\">\n                        {filteredData[customer.id].map((data, index) =>\n                            <div className=\"car-container\" style={{ backgroundColor: (data.status === 'online') ? '#7bd07b' : '#bb2b17' }} key={index}>\n                                <div>{locales.VEHICLE_REGISTERATION}: {data.regNo} </div>\n                                <div>{locales.VEHICLE_ID}: {data.id}</div>\n                                <div>{locales.STATUS}: {data.status} </div>\n                            </div>\n\n                        )}\n                    </div>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>)\n        } else {\n            return null;\n        }\n    };\n\n    render() {\n        const { loading, customers } = this.props;\n        const { selectedLanguage, selectedCustomer, selectedStatus, overviewData, filteredData } = this.state;\n\n        /**\n         * Loader to show while fetching data from server\n         */\n        if (loading) {\n            return <CircularProgress />\n        }\n        return (\n            <Container maxWidth=\"md\" data-test=\"appComponent\">\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <div className=\"language-selector\">\n                            <FormControl className=\"formControl\">\n                                <InputLabel>Language</InputLabel>\n                                <Select\n                                    native\n                                    onChange={this.handleChangeLanguage}\n                                    value={selectedLanguage}\n                                >\n                                    <option value={'en'}>English</option>\n                                    <option value={'sweedish'}>Sweedish</option>\n\n                                </Select>\n                            </FormControl>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <h1 id=\"vehicle-status-content\">{locales.VEHICAL_OVERVIEW_STATUS}</h1>\n                    </Grid>\n                    {/* Selection Dropdowns */}\n                    <Grid item xs={4}>\n                        <FormControl className=\"formControl\">\n                            <div>{locales.STATUS}</div>\n                            <Select\n                                native\n                                onChange={(e) => this.handleChange(e.target.value, 'selectedStatus')}\n                                value={selectedStatus}\n                            >\n                                <option value=\"\" className=\"selectEmpty\">{locales.ALL}</option>\n                                <option value=\"online\">{locales.ONLINE}</option>\n                                <option value=\"offline\">{locales.OFFLINE}</option>\n\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl className=\"formControl\">\n                            <div>{locales.CUSTOMERS}</div>\n                            <Select\n                                input={<Input />}\n                                renderValue={selected => selected.join(', ')}\n                                MenuProps={{\n                                    PaperProps: {\n                                        style: {\n                                            maxHeight: 48 * 4.5 + 8,\n                                            width: 250,\n                                        },\n                                    },\n                                }}\n                                multiple\n                                onChange={(e) => this.handleChange(e.target.value, 'selectedCustomer')}\n                                value={selectedCustomer}\n                            >\n                                {customers.map(customer => (\n                                    <MenuItem key={customer.id} value={customer.id}>\n                                        <Checkbox checked={selectedCustomer.indexOf(customer.id) > -1} />\n                                        <ListItemText primary={customer.name} />\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.resetFilter} style={{ marginTop: '25px' }}>\n                            Reset Filters\n                        </Button>\n                    </Grid>\n                    {/* Selection Dropdowns */}\n\n                    {/* Overview Pie Chart */}\n                    <Grid item xs={12}>\n                        <PieChart width={250} height={250}>\n                            <Pie dataKey=\"value\" isAnimationActive={false} data={overviewData} cx={125} cy={125} outerRadius={80} fill=\"#8884d8\" label>\n                                {\n                                    overviewData.map((entry, index) => <Cell fill={entry.color} key={index} />)\n                                }\n                            </Pie>\n                            <Tooltip />\n                        </PieChart>\n                    </Grid>\n                    {/* Overview Pie Chart */}\n\n                    <Grid item xs={12}>\n                        <Grid item xs={12}>\n\n                            {customers && customers.map(customer => this.renderCustomerCards(filteredData, customer))}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Container>\n        )\n    }\n}\n\n// map state to props\nconst mapStateToProps = ({ vehicles, customers }) => {\n    const { data, loading } = vehicles;\n    return { data, loading, customers: customers.customers };\n}\n\nexport default connect(mapStateToProps, {\n    getVehiclesInfo,\n    getCustomersInfo\n})(VehicleInfo);\n\n","export default {\n    en: {\n        VEHICAL_OVERVIEW_STATUS: \"Vehicle Status Overview\",\n        VEHICLE_REGISTERATION: \"Vehicle Registeration\",\n        VEHICLE_ID: \"Vehicle ID\",\n        ONLINE: \"online\",\n        OFFLINE: \"offline\",\n        ALL: \"All\",\n        CUSTOMERS: \"Customers\",\n        VID: \"Vehicle ID\",\n        REGISTERATION_NUMBER: \"Registration Number\",\n        CUSTOMER_NAME: \"Customer Name\",\n        STATUS: \"Status\"\n    },\n    sweedish: {\n        VEHICAL_OVERVIEW_STATUS: \"Översikt över fordonsstatus\",\n        VEHICLE_REGISTERATION: \"Fordons registrering\",\n        VEHICLE_ID: \"Fordons-ID\",\n        CUSTOMERS: \"kunder\",\n        ONLINE: \"online\",\n        ALL: \"Allt\",\n        OFFLINE: \"offline\",\n        VID: \"Fordons ID\",\n        REGISTERATION_NUMBER: \"Registrerings nummer\",\n        CUSTOMER_NAME: \"Köparens namn\",\n        STATUS: \"Status\"\n    }\n}","import {\n  GET_VEHICLES_INFO,\n  GET_VEHICLES_INFO_SUCCESS,\n  GET_VEHICLES_INFO_FAILURE\n} from './../actions/types';\n\n/**\n * initial data\n */\nconst INIT_STATE = {\n  data: [],\n  overviewData: [],\n  loading: false\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_VEHICLES_INFO:\n      return { ...state, loading: true };\n    case GET_VEHICLES_INFO_SUCCESS:\n      return { ...state, loading: false, data: action.payload };\n    case GET_VEHICLES_INFO_FAILURE:\n      return { ...state, isError: true, loading: false, err: action.payload };\n    default: return { ...state };\n  }\n}","import {\n  GET_CUSTOMERS_INFO,\n  GET_CUSTOMERS_INFO_SUCCESS,\n  GET_CUSTOMERS_INFO_FAILURE\n} from './../actions/types';\n\n/**\n * initial data\n */\nconst INIT_STATE = {\n  customers: [],\n  loading: false\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_CUSTOMERS_INFO:\n      return { ...state, loading: true };\n    case GET_CUSTOMERS_INFO_SUCCESS:\n      return { ...state, loading: false, customers: action.payload };\n    case GET_CUSTOMERS_INFO_FAILURE:\n      return { ...state, isError: true, loading: false, err: action.payload };\n    default: return { ...state };\n  }\n}","/**\n * App Reducers\n */\nimport { combineReducers } from 'redux';\nimport vehicles from './Vehicles';\nimport customers from './Customers';\n\nconst reducers = combineReducers({\n    vehicles,\n    customers\n});\n\nexport default reducers;\n","/**\n * Dashboard Sagas\n */\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\n\nimport {\n    GET_VEHICLES_INFO,\n} from '../actions/types';\n\nimport {\n    getVehiclesInfoSuccess,\n    getVehiclesInfoFailure\n} from '../actions';\n\n/**\n * Send Vehicle Info Request To Server\n */\nconst getVehicleInfoRequest = async (filter) =>\n    await fetch(`http://localhost:3004/vehicles?_expand=customer`)\n        .then(response => response.json())\n        .catch(error => error);\n\n/**\n * Get Vehicle Info From Server\n */\nfunction* getVehicleInfoFromServer(action) {\n    try {\n        const response = yield call(getVehicleInfoRequest, action.filter);\n        yield put(getVehiclesInfoSuccess(response));\n    } catch (error) {\n        yield put(getVehiclesInfoFailure(error));\n    }\n}\nexport function* getVehicleInfo() {\n    yield takeEvery(GET_VEHICLES_INFO, getVehicleInfoFromServer);\n}\n\n/**\n * Dashboard Root Saga\n */\nexport default function* rootSaga() {\n    yield all([\n        fork(getVehicleInfo)\n    ]);\n}","/**\n * Dashboard Sagas\n */\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\n\nimport {\n    GET_CUSTOMERS_INFO,\n} from '../actions/types';\n\nimport {\n    getCustomersInfoFailure,\n    getCustomersInfoSuccess\n} from '../actions';\n\n/**\n * Send Customers Info Request To Server\n */\nconst getCustomersInfoRequest = async (filter) =>\n    await fetch(`http://localhost:3004/customers`)\n        .then(response => response.json())\n        .catch(error => error);\n\n/**\n * Get Customers Info From Server\n */\nfunction* getCustomersInfoFromServer(action) {\n    try {\n        const response = yield call(getCustomersInfoRequest);\n        yield put(getCustomersInfoSuccess(response));\n    } catch (error) {\n        yield put(getCustomersInfoFailure(error));\n    }\n}\nexport function* getCustomersInfo() {\n    yield takeEvery(GET_CUSTOMERS_INFO, getCustomersInfoFromServer);\n}\n\n/**\n * Dashboard Root Saga\n */\nexport default function* rootSaga() {\n    yield all([\n        fork(getCustomersInfo)\n    ]);\n}","/**\n * Root Sagas\n */\nimport { all } from 'redux-saga/effects';\n\n// sagas\nimport vehicles from './Vehicles';\nimport customers from './Customers';\n\nexport default function* rootSaga(getState) {\n    yield all([\n        vehicles(),\n        customers()\n    ]);\n}","/**\n * Redux Store\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from '../reducers';\nimport RootSaga from \"../sagas\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n\n    const store = createStore(\n        reducers,\n        initialState,\n        compose(applyMiddleware(...middlewares))\n    );\n\n    sagaMiddleware.run(RootSaga);\n\n    if (module.hot) {\n        // Enable Webpack hot module replacement for reducers\n        module.hot.accept('../reducers/index', () => {\n            const nextRootReducer = require('../reducers/index');\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n","import React from 'react';\nimport './App.css';\nimport VehicleInfo from './components/VehicleInfo/VehicleInfo';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store';\n\nfunction App() {\n  return (\n    <Provider store={configureStore()}>\n      <VehicleInfo />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}